#+TITLE: My Emacs configuration
#+AUTHOR: Cédric Chevalier
#+OPTIONS: toc:nil

* My Emacs configuration

It is inspired by:
- [caiohcs](https://github.com/caiohcs/my-emacs/)

* Programming
** Git
*** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :bind (("C-x g" . magit-status)))
#+END_SRC

*** Current modifications

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :defer 0.3
    :straight t
    :delight
    :init (global-git-gutter-mode +1))
#+END_SRC

*** gitlab support

#+BEGIN_SRC emacs-lisp
  (use-package forge
    :straight t
    :after magit
  )
#+END_SRC

From https://magit.vc/manual/ghub/Storing-a-Token.html#Storing-a-Token

The variable auth-sources controls how and where Auth-Source keeps its secrets. The default value is a list of three files: ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"), but to avoid confusion you should make sure that only one of these files exists and then you should also adjust the value of the variable to only ever use that file, for example:

(setq auth-sources '("~/.authinfo"))

In ~/.authinfo secrets are stored in plain text. If you don’t want that, then you should use the encrypted ~/.authinfo.gpg instead:

(setq auth-sources '("~/.authinfo.gpg"))

Auth-Source also supports storing secrets in various external key-chains. See (auth)Top for more information.

The default Auth-Source backends only support storing three values per entry; the "machine", the "login" and the "password". Because Ghub uses separate tokens for each package, it has to squeeze four values into those three slots, and it does that by using "USERNAME^PACKAGE" as the "login".

Assuming your Github username is "ziggy", the package is named "forge", and you want to access Github.com, an entry in one of the three mentioned files would then look like this:

machine api.github.com login ziggy^forge password 012345abcdef...

Assuming your Gitlab username is "ziggy", the package is named "forge", and you want to access Gitlab.com, an entry in one of the three mentioned files would then look like this:

machine gitlab.com/api/v4 login ziggy^forge password 012345abcdef..

** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode ("\\.yml\\'" . yaml-mode))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :straight t
    :commands docker)

  (use-package dockerfile-mode
    :straight t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+END_SRC
** Markdown

Needs =pandoc=

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :delight "μ "
    :mode ("\\.markdown\\'" "\\.md\\'")
    :custom (markdown-command "/usr/bin/pandoc"))

  (use-package markdown-preview-mode
    :straight t
    :after markdown-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))
#+end_src

** Shell scripts
*** Exec rights
The snippet below ensures that the execution right is automatically granted to
save a shell script file that begins with a =#!= shebang:

#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :straight t
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+END_SRC

*** Fish support

#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
     :straight t
     :mode ("\\.fish\\'")
  )
#+END_SRC

** Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :straight t
    :defer 5.1
    :diminish smartparens-mode
    :config 
    (smartparens-global-mode)
    (sp-local-pair 'org-mode "*" "*")
    (sp-local-pair 'org-mode "_" "_"))

  (use-package highlight-parentheses
    :straight t
    :defer 5.3
    :diminish highlight-parentheses-mode
    :config (global-highlight-parentheses-mode))

  (defvar show-paren-delay 0)
  (show-paren-mode t)
#+END_SRC
* Interface
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t)

  (load-theme 'doom-acario-light t)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode t)

(use-package spaceline
  :straight t
  :defer 2.2
  :config
  (require 'spaceline-config)
  (setq powerline-default-separator (quote arrow))
  (setq spaceline-line-column-p nil)
  (setq spaceline-buffer-size nil)
  (setq spaceline-workspace-numbers-unicode t)
  (setq spaceline-buffer-encoding-abbrev-p nil)
  (spaceline-spacemacs-theme))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :commands which-key-mode)
#+END_SRC
** Kill ring
#+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
  :straight t
  :bind (("M-y" . popup-kill-ring))) 
#+END_SRC
** Regular expressions
#+begin_src emacs-lisp
(use-package visual-regexp-steroids
  :straight t
  :commands vr/replace)
#+end_src

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :init
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    ;; Dashboard requirements.
    (use-package page-break-lines
      :straight t)
    (use-package all-the-icons
      :straight t)
    ;; Dashboard configuration.
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome to Emacs")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents   . 5)
                            (agenda    . 5)))
    (setq dashboard-set-init-info t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; adds a clock
    (defun dashboard-insert-custom (list-size)
      (defun string-centralized (str)
        (let* ((indent
                (concat "%"
                        (number-to-string
                         (/ (- (window-body-width) (string-width str)) 2))
                        "s"))
               (str (concat indent str indent)))
          (format str " " " ")))
  
      (insert (propertize (string-centralized (format-time-string "%a %d %b %Y" (current-time))) 'font-lock-face '('bold :foreground "#6c4c7b")))
      (newline)
      (insert (propertize (string-centralized (format-time-string "%H:%M" (current-time))) 'font-lock-face '('bold :foreground "#6c4c7b"))))

    (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
    (add-to-list 'dashboard-items '(custom) t)

    (defun test-dashboard () (setq *my-timer* (run-at-time "20 sec" nil #'(lambda ()
                                                                            (when *my-timer*
                                                                             (cancel-timer *my-timer*)
                                                                             (setq *my-timer* nil))
                                                                            (when (string=
                                                                                   (buffer-name (window-buffer))
                                                                                   "*dashboard*")
                                                                             (dashboard-refresh-buffer))))))
    (add-hook 'dashboard-mode-hook #'test-dashboard))
#+END_SRC

* Features
** Ivy
#+BEGIN_SRC emacs-lisp
  ;;; Global
  ;; Ivy is a generic completion tool
  (use-package ivy
    :straight t
    :diminish ivy-mode
    :defer 0.9
    :config
    (use-package swiper
      :straight t
      :bind (("C-s" . swiper)
             :map swiper-map
             ("M-%" . swiper-query-replace)))
    (use-package counsel
      :straight t
      :diminish counsel-mode
      :config (counsel-mode))
    (use-package ivy-rich
      :defer 0.1
      :straight t
      :config
      (ivy-rich-mode 1))
  )
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :hook (dired-mode . (lambda () (dired-omit-mode)))
    :bind (:map dired-mode-map
           ("<return>" . dired-find-alternate-file)
           ("<dead-circumflex>" . dired-up-directory)
           ("E" . image-dired)
           ("J" . dired-omit-mode)))

  (use-package dired-x
    :config
    (setq dired-omit-verbose nil)
    (setq dired-omit-files
          "^\\..+$"))

  (use-package peep-dired
    :straight t
    :bind (:map dired-mode-map
           ("P" . 'peep-dired)))

  (use-package dired-rainbow
    :straight t
    :defer 3.2
    :config
    (progn
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")))

#+END_SRC
** Completion
=company= is used
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer 0.5
    :straight t
    :delight
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :after company
    :delight
    :hook (company-mode . company-box-mode))
#+END_SRC

** Indent
*** editor config
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :defer 0.3
  :straight t
  :config (editorconfig-mode 1))
#+END_SRC

*** highlight
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :defer 0.3
    :straight t
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+END_SRC
** LSP
*** Core
Set prefix for lsp-command-keymap (few alternatives - "=C-l=", "=C-c l=")

Use =ls-deferred= to defer server status.

#+BEGIN_SRC emacs-lisp
  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
     :straight t
     :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
            (python-mode . lsp-deferred)
            ;; if you want which-key integration
            (lsp-mode . lsp-enable-which-key-integration))
      :commands (lsp lsp-deferred))
#+END_SRC

Use =lsp-ui=
#+BEGIN_SRC emacs-lisp
  ;; optionally
  (use-package lsp-ui
     :straight t
     :commands lsp-ui-mode)
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy
     :straight t
     :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs
     :straight t
     :commands lsp-treemacs-errors-list)
#+END_SRC

*** debugger

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
     :straight t)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :straight t
  :defer 2
  :delight company-mode
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :bind
  ("<C-tab>" . company-complete-common-or-cycle)
  :config
  (bind-key "C-<tab>" 'company-complete org-mode-map)
  (bind-keys :map company-active-map
             ("s-<tab>" . company-complete-common-or-cycle)
             ("C-n"     . company-select-next)
             ("C-p"     . company-select-previous))
  ;; Turn off the auto downcasing of things
  (setq company-dabbrev-downcase nil
        company-show-numbers t
        company-tooltip-align-annotations t
        company-selection-wrap-around t
        company-tooltip-flip-when-above t
        company-dabbrev-code-everywhere t
        company-dabbrev-code-ignore-case t))

(use-package company-box
  :straight t
  :hook (company-mode . company-box-mode))  
#+END_SRC
** Custom
#+BEGIN_SRC emacs-lisp
  (setq-default
   auto-save-list-file-name  (expand-file-name "local/auto-save-list"
                   user-emacs-directory)
   custom-file  (expand-file-name "local/custom.el"
                   user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+END_SRC
