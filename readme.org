#+TITLE: My Emacs configuration
#+AUTHOR: CÃ©dric Chevalier
#+OPTIONS: toc:nil

* My Emacs configuration

It is inspired by:
- [caiohcs](https://github.com/caiohcs/my-emacs/)
- [jchaffin](https://github.com/jchaffin/.emacs.d)

* Programming
** Cpp
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :straight t
  :config
    (setq ccls-executable "ccls")
  (setq lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers
                '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))

#+END_SRC
** CMAKE
*** Edit
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :straight t
  :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))

(use-package cmake-font-lock
  :straight t
  :after (cmake-mode)
  :hook (cmake-mode . cmake-font-lock-activate))
#+END_SRC
*** Compile
#+BEGIN_SRC emacs-lisp
(use-package cmake-ide
  :straight t
  :after projectile
  :hook (c++-mode . my/cmake-ide-find-project)
  :preface
  (defun my/cmake-ide-find-project ()
    "Finds the directory of the project for cmake-ide."
    (with-eval-after-load 'projectile
      (setq cmake-ide-project-dir (projectile-project-root))
      (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
    (setq cmake-ide-compile-command
      (concat "cd " cmake-ide-build-dir " && cmake " projectile-project-root " && cmake --build"))
    (cmake-ide-load-db))

  (defun my/switch-to-compilation-window ()
    "Switches to the *compilation* buffer after compilation."
    (other-window 1))
  :bind ([remap comment-region] . cmake-ide-compile)
  :init (cmake-ide-setup)
  :config
  (advice-add 'cmake-ide-compile :after #'my/switch-to-compilation-window)
  (put 'cmake-ide-build-dir 'safe-local-variable #'stringp)
)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :straight t
  :bind
  ("C-c p" . projectile-command-map)
  ("C-x w" . hydra-projectile-other-window/body)
  ("C-c C-p" . hydra-projectile/body)
  :config
  (use-package counsel-projectile
    :after (projectile)
    :straight t
    :bind
    (:map projectile-command-map
          ("s s" . counsel-projectile-rg)
          ("p" . counsel-projectile-switch-project)))
  (when (eq system-type 'windows-nt)
    (setq projectile-indexing-method 'native))
  (setq projectile-enable-caching t
        projectile-require-project-root t
        projectile-mode-line '(:eval (format " ðŸ› [%s]" (projectile-project-name)))
        projectile-completion-system 'default)
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (projectile-mode)
  (defhydra hydra-projectile-other-window (:color teal)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))
  (defhydra hydra-projectile (:color teal :hint nil)
    "
 PROJECTILE: %(projectile-project-root)

 Find File            Search/Tags          Buffers                Cache
  ------------------------------------------------------------------------------------------
  _C-f_: file            _r_: ag                _i_: Ibuffer           _c_: cache clear
   _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
   _fd_: file curr dir   _o_: multi-occur     _C-k_: Kill all buffers  _X_: cleanup non-existing
    _r_: recent file                                               ^^^^_z_: cache current
    _d_: dir

  "
    ("r"   counsel-projectile-rg)
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("C-f" projectile-find-file)
    ("ff"  projectile-find-file-dwim)
    ("fd"  projectile-find-file-in-directory)
    ("g"   ggtags-update-tags)
    ("C-g" ggtags-update-tags)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("C-k" projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("C-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   projectile-recentf)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window")
    ("q"   nil "cancel" :color blue)))
#+END_SRC
** Git
*** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :bind (("C-x g" . magit-status)))
#+END_SRC

*** Current modifications

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :defer 0.3
    :straight t
    :delight
    :init (global-git-gutter-mode +1))
#+END_SRC

*** gitlab support
**** Forge
#+BEGIN_SRC emacs-lisp
  (use-package forge
    :straight t
    :after magit
  )
#+END_SRC

From https://magit.vc/manual/ghub/Storing-a-Token.html#Storing-a-Token

The variable auth-sources controls how and where Auth-Source keeps its secrets. The default value is a list of three files: ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"), but to avoid confusion you should make sure that only one of these files exists and then you should also adjust the value of the variable to only ever use that file, for example:

(setq auth-sources '("~/.authinfo"))

In ~/.authinfo secrets are stored in plain text. If you donâ€™t want that, then you should use the encrypted ~/.authinfo.gpg instead:

(setq auth-sources '("~/.authinfo.gpg"))

Auth-Source also supports storing secrets in various external key-chains. See (auth)Top for more information.

The default Auth-Source backends only support storing three values per entry; the "machine", the "login" and the "password". Because Ghub uses separate tokens for each package, it has to squeeze four values into those three slots, and it does that by using "USERNAME^PACKAGE" as the "login".

Assuming your Github username is "ziggy", the package is named "forge", and you want to access Github.com, an entry in one of the three mentioned files would then look like this:

machine api.github.com login ziggy^forge password 012345abcdef...

Assuming your Gitlab username is "ziggy", the package is named "forge", and you want to access Gitlab.com, an entry in one of the three mentioned files would then look like this:

machine gitlab.com/api/v4 login ziggy^forge password 012345abcdef..

**** Gitlab ci

#+BEGIN_SRC emacs-lisp
(use-package gitlab-ci-mode
  :straight t)

(use-package gitlab-ci-mode-flycheck
  :straight t
  :after gitlab-ci-mode
  :init (gitlab-ci-mode-flycheck-enable))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
;; (use-package lsp-pyright
;;    :straight t
;;    :hook (python-mode . lsp-deferred))

(use-package yapfify
  :straight t
  :hook (python-mode . yapf-mode)
)
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode ("\\.yml\\'" . yaml-mode))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :straight t
    :bind ("C-c d" . docker))

  (use-package dockerfile-mode
    :straight t
    :mode ("Dockerfile\\'" "\\.dockerfile$"))
#+END_SRC
** Markdown

Needs =pandoc=

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :delight "Î¼ "
    :mode ("\\.markdown\\'" "\\.md\\'")
    :custom (markdown-command "/usr/bin/pandoc"))

  (use-package markdown-preview-mode
    :straight t
    :after markdown-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))
#+end_src

** RST
*** plain
#+BEGIN_SRC emacs-lisp
(use-package rst
  :straight t
  :delight "rst"
  :mode (("\\.txt$" . rst-mode)
         ("\\.rst$" . rst-mode)
         ("\\.rest$" . rst-mode)))
#+END_SRC
*** sphinx
#+BEGIN_SRC emacs-lisp
(use-package sphinx-mode
  :straight t
  :after rst)
#+END_SRC
** Shell scripts
*** Exec rights
The snippet below ensures that the execution right is automatically granted to
save a shell script file that begins with a =#!= shebang:

#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :straight t
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+END_SRC

*** Fish support

#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
     :straight t
     :mode ("\\.fish\\'")
  )
#+END_SRC

** Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :straight t
    :defer 5.1
    :diminish smartparens-mode
    :config 
    (smartparens-global-mode)
    (sp-local-pair 'org-mode "*" "*")
    (sp-local-pair 'org-mode "_" "_"))

  (use-package highlight-parentheses
    :straight t
    :defer 5.3
    :diminish highlight-parentheses-mode
    :config (global-highlight-parentheses-mode))

  (defvar show-paren-delay 0)
  (show-paren-mode t)
#+END_SRC
* Interface
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t)

  (load-theme 'doom-acario-light t)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode t)

(use-package spaceline
  :straight t
  :defer 2.2
  :config
  (require 'spaceline-config)
  (setq powerline-default-separator (quote arrow))
  (setq spaceline-line-column-p nil)
  (setq spaceline-buffer-size nil)
  (setq spaceline-workspace-numbers-unicode t)
  (setq spaceline-buffer-encoding-abbrev-p nil)
  (spaceline-spacemacs-theme))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :commands which-key-mode)
#+END_SRC
** Kill ring
#+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
  :straight t
  :bind (("M-y" . popup-kill-ring))) 
#+END_SRC
** Regular expressions
#+begin_src emacs-lisp
(use-package visual-regexp-steroids
  :straight t
  :commands vr/replace)
#+end_src

** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :straight t)
#+END_SRC
** buffer
I use =bufler= instead of =ibuffer=

#+BEGIN_SRC emacs-lisp
(use-package bufler
  :straight t
  :bind (("C-x C-b" . bufler))
  )
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :init
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    ;; Dashboard requirements.
    (use-package page-break-lines
      :straight t)
    (use-package all-the-icons
      :straight t)
    ;; Dashboard configuration.
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome to Emacs")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents   . 5)
                            (agenda    . 5)))
    (setq dashboard-set-init-info t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; adds a clock
    (defun dashboard-insert-custom (list-size)
      (defun string-centralized (str)
        (let* ((indent
                (concat "%"
                        (number-to-string
                         (/ (- (window-body-width) (string-width str)) 2))
                        "s"))
               (str (concat indent str indent)))
          (format str " " " ")))
  
      (insert (propertize (string-centralized (format-time-string "%a %d %b %Y" (current-time))) 'font-lock-face '('bold :foreground "#6c4c7b")))
      (newline)
      (insert (propertize (string-centralized (format-time-string "%H:%M" (current-time))) 'font-lock-face '('bold :foreground "#6c4c7b"))))

    (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
    (add-to-list 'dashboard-items '(custom) t)

    (defun test-dashboard () (setq *my-timer* (run-at-time "20 sec" nil #'(lambda ()
                                                                            (when *my-timer*
                                                                             (cancel-timer *my-timer*)
                                                                             (setq *my-timer* nil))
                                                                            (when (string=
                                                                                   (buffer-name (window-buffer))
                                                                                   "*dashboard*")
                                                                             (dashboard-refresh-buffer))))))
    (add-hook 'dashboard-mode-hook #'test-dashboard))
#+END_SRC

* Features
** Ivy
#+BEGIN_SRC emacs-lisp
  ;;; Global
  ;; Ivy is a generic completion tool
  (use-package ivy
    :straight t
    :diminish ivy-mode
    :defer 0.9
    :config
    (use-package swiper
      :straight t
      :bind (("C-s" . swiper)
             :map swiper-map
             ("M-%" . swiper-query-replace)))
    (use-package counsel
      :straight t
      :diminish counsel-mode
      :config (counsel-mode))
    (use-package ivy-rich
      :defer 0.1
      :straight t
      :config
      (ivy-rich-mode 1))
    (use-package ivy-hydra
      :straight t)
     (ivy-mode t)
  )
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :hook (dired-mode . (lambda () (dired-omit-mode)))
    :bind (:map dired-mode-map
           ("<return>" . dired-find-alternate-file)
           ("<dead-circumflex>" . dired-up-directory)
           ("E" . image-dired)
           ("J" . dired-omit-mode)))

  (use-package dired-x
    :straight (:type built-in)
    :config
    (setq dired-omit-verbose nil)
    (setq dired-omit-files
          "^\\..+$"))

  (use-package peep-dired
    :straight t
    :bind (:map dired-mode-map
           ("P" . 'peep-dired)))

  (use-package dired-rainbow
    :straight t
    :defer 3.2
    :config
    (progn
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")))

#+END_SRC
** Completion
=company= is used
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer 0.5
    :straight t
    :delight
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :straight t
    :after company
    :delight
    :hook (company-mode . company-box-mode))
#+END_SRC

** Indent
*** editor config
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :defer 0.3
  :straight t
  :config (editorconfig-mode 1))
#+END_SRC

*** highlight
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :defer 0.3
    :straight t
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+END_SRC
** LSP
*** Core
Set prefix for lsp-command-keymap (few alternatives - "=C-l=", "=C-c l=")

Use =ls-deferred= to defer server status.

#+BEGIN_SRC emacs-lisp
  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
     :straight t
     :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
            (python-mode . lsp-deferred)
	    (sh-mode . lsp-deferred)
            ;; if you want which-key integration
            (lsp-mode . lsp-enable-which-key-integration))
      :commands (lsp lsp-deferred))
#+END_SRC

Use =lsp-ui=
#+BEGIN_SRC emacs-lisp
  ;; optionally
  (use-package lsp-ui
     :straight t
     :commands lsp-ui-mode)
#+END_SRC

*** company
#+BEGIN_SRC emacs-lisp
(use-package company-lsp 
  :straight t
  :commands company-lsp
  :config (push 'company-lsp company-backends))
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy
     :straight t
     :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs
     :straight t
     :commands lsp-treemacs-errors-list)
#+END_SRC

*** debugger

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
     :straight t)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :straight t
  :init (global-flycheck-mode))
#+END_SRC
** Custom
#+BEGIN_SRC emacs-lisp
  (setq-default
   auto-save-list-file-name  (expand-file-name "local/auto-save-list"
                   user-emacs-directory)
   custom-file  (expand-file-name "local/custom.el"
                   user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+END_SRC
** Search
*** Fuzzy
#+BEGIN_SRC emacs-lisp
(use-package fzf
  :straight t)
#+END_SRC
*** ripgrep
#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :straight t)
#+END_SRC
** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :config
    (add-to-list 'yas-snippet-dirs (expand-file-name "snippets"
                   user-emacs-directory))
    (yas-global-mode 1))
#+END_SRC

And some preconfigured snippets:
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :straight t)
#+END_SRC
* Org
*** Roam
For =zettelkasten= notes.

Requires:
- =sqlite3=
- =graphviz= for =dot=

#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :straight t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/org/roam/")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph-show))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))

(use-package org-journal
  :straight t
  :after org-roam
  :bind
  ("C-c n j" . org-journal-new-entry)
  :custom
  (org-journal-date-prefix "#+title: ")
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-dir org-roam-directory)
  (org-journal-date-format "%A, %d %B %Y"))
#+END_SRC

*** Export
#+BEGIN_SRC emacs-lisp
(use-package ox
  :straight org-plus-contrib
)
#+END_SRC

**** Latex
From https://github.com/jchaffin/.emacs.d/blob/master/dotemacs.org
#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  :straight org-plus-contrib
  :after (ox)
  :demand t
  :custom
  (org-latex-hyperref-template nil)
  (org-latex-listings 'minted)
  (org-latex-minted-options
   '(("mathescape" "true")
     ("escapeinside" "@@")
     ("breaklines" "true")
     ("fontsize" "\\footnotesize")))
  (org-latex-compiler "xelatex")
  (org-latex-classes
     '(("article"
        "\\documentclass[11pt]{article}"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
    ("report"
     "\\documentclass[11pt]{report}"
     ("\\part{%s}" . "\\part*{%s}")
     ("\\chapter{%s}" . "\\chapter*{%s}")
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
    ("book"
     "\\documentclass[11pt]{book}"
     ("\\part{%s}" . "\\part*{%s}")
     ("\\chapter{%s}" . "\\chapter*{%s}")
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
    ("article-standalone"
     "\\documentclass{article}
      [NO-DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]" ;; header-string
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*a{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
    ("uclaling"
     "\\documentclass{uclaling}
      [NO-DEFAULT-PACKAGES]
      [EXTRA]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
    ("uclacs"
     "\\documentclass{uclacs}
      [NO-DEFAULT-PACKAGES]
      [EXTRA]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
     ("humanities"
      "\\documentclass{humanities}
      [NO-DEFAULT-PACKAGES]
      [EXTRA]"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
     ("unicode-math"
	  "\\documentclass{article}
     [PACKAGES]
     [NO-DEFAULT-PACKAGES]
     [EXTRA]
	   \\usepackage{fontspec}
	   \\usepackage{amsmath}
	   \\usepackage{xltxtra}
	   \\usepackage{unicode-math}
	   \\setmathfont{STIX2Math}[
	     Path/Users/jacobchaffin/Library/Fonts/,
	     Extension={.otf},
	     Scale=1]
	   \\setmainfont{STIX2Text}[
	     Path/Users/jacobchaffin/Library/Fonts/,
	     Extension={.otf},
	     UprightFont={*-Regular},
	     BoldFont={*-Bold},
	     ItalicFont={*-Italic},
	     BoldItalicFont={*-BoldItalic}]"
	  ("\\section{%s}" . "\\section*{%s}")
	  ("\\subsection{%s}" . "\\subsection*{%s}")
	  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	  ("\\paragraph{%s}" . "\\paragraph*{%s}")
	  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  :init
  ;; minted
  (defcustom org-latex-minted-from-org-p nil
    "If non-nil, then included minted in `org-latex-packages-alist'
  and get options from `org-latex-minted-options'."
    :type 'boolean
    :group 'org-export-latex
    :version "26.1"
    :package-version '(Org . "9.0"))

  (defun org-latex-toggle-minted-from-org ()
    "Toggle `org-latex-minted-from-org-p'."
    (interactive)
    (cl-flet ((nominted (pkg) (not (string= (cadr pkg) "minted"))))
      (if (not org-latex-minted-from-org-p)
	        (setq org-latex-packages-alist
		            (append org-latex-packages-alist '(("newfloat" "minted"))))
	      (setq org-latex-packages-alist (seq-filter #'nominted org-latex-packages-alist)))
      (setq org-latex-minted-from-org-p (not org-latex-minted-from-org-p))
      (message "org minted %s" (if org-latex-minted-from-org-p
				                           "enabled" "disabled"))))
  ;; Latex process
  (setq oxl-process-bibtex
	      '("latexmk -pdflatex='pdflatex -interaction=nonstopmode -shell-escape' -synctex=1 -pdf -bibtex -f %f"))

  (setq oxl-process-biber
	      '("latexmk -pdflatex='pdflatex -interaction=nonstopmode -shell-escape' -synctex=1 -pdf -biber -f %f"))

  (setq oxl-process-xelatex
	      '("latexmk -pdf -synctex=1 -shell-escape -xelatex -f %f"))

  (setq oxl-process-lualatex
	      '("latexmk -pdf -synctex=1 -shell-escape -lualatex -f %f"))

  (defcustom org-latex-pdf-engines
    '(("lualatex" . oxl-process-lualatex)
      ("xelatex" . oxl-process-xelatex)
      ("pdflatex" . (oxl-process-bibtex oxl-process-biber)))
    "A list of LaTeX commands available to run when
  `org-latex-export-to-pdf' is invoked."
    :type '(choice (cons string symbol) (cons string (repeat symbol)))
    :group 'org-export-latex
    :version "26.1")

  (defvar org-latex-pdf-process-hook nil
    "Hook to run after setting pdf process.")

  (defun org-latex-pdf-process-set (compiler)
    (interactive
     (list (completing-read "Compiler: " org-latex-pdf-engines)))
    (if (member compiler org-latex-compilers)
	      (let ((process (cdr (assoc compiler org-latex-pdf-engines))))
	        (setq org-latex-pdf-process (symbol-value
				                               (if (listp process)
					                                 (intern (completing-read "Process:" process))
					                               process))
		            org-latex-compiler compiler)
	        (run-hooks org-latex-pdf-process-hook))
      (error "%s not in `org-latex-compilers'" compiler)))

  :config
  (setq org-latex-logfiles-extensions
        (append org-latex-logfiles-extensions
                '("acn" "ind" "ilg" "ist" "glo" "tex" "synctex.gz")))

  (with-eval-after-load 'ox
    (org-latex-pdf-process-set org-latex-compiler))

  :bind
  (:map org-mode-map
	      ("M-s l" . org-latex-pdf-process-set)))
#+END_SRC

**** Pandoc
#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :ensure-system-package (pandoc)
  :after (:all ox org-ref)
  :custom
  (org-pandoc-options '((standalone . t)))
  :demand t
  :config
  (defun ox-pandoc--pdf-engine ()
    "Set the default latex pdf engine to the one set by `org-latex-pdf-process'. "
    (let ((syms (mapcar (lambda (x) (if (listp x) (if (listp (cdr x)) (cadr x) (cdr x)))) org-latex-pdf-engines))
          (pred (lambda (sym) (eq (symbol-value sym) org-latex-pdf-process)))
          (prefix "oxl-process-"))
      (cadr (split-string (symbol-name (car (seq-filter pred syms))) prefix))))

  (setq org-pandoc-options-for-beamer-pdf
        `((pdf-engine . ,(ox-pandoc--pdf-engine)))
        org-pandoc-options-for-latex-pdf
        `((pdf-engine . ,(ox-pandoc--pdf-engine))))

  (defun org-pandoc-pdf-engine-set (compiler)
    "Set the latex pdf engine for `org-pandoc-export-to-latex-pdf'."
    (interactive
     (list (completing-read "Compiler: " org-latex-compilers)))
    (setq org-pandoc-options-for-beamer-pdf
          `((pdf-engine . ,compiler))
          org-pandoc-options-for-latex-pdf
          `((pdf-engine . ,compiler))))
  ;; Open MS .doc?x files with system viewer.
  (when (symbolp 'org-file-apps)
    (add-to-list 'org-file-apps '("\\.docx?\\'" . system))))
#+END_SRC

**** Hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after (ox))
#+END_SRC
