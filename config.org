#+TITLE: My Emacs configuration
#+AUTHOR: CÃ©dric Chevalier
#+OPTIONS: toc:nil

* My Emacs configuration

It is inspired by:
- [caiohcs](https://github.com/caiohcs/my-emacs/)

* Programming
** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :bind (("C-x g" . magit-status)))
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode ("\\.yml\\'" . yaml-mode))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :straight t
    :commands docker)

  (use-package dockerfile-mode
    :straight t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+END_SRC
** Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :straight t
    :defer 5.1
    :diminish smartparens-mode
    :config 
    (smartparens-global-mode)
    (sp-local-pair 'org-mode "*" "*")
    (sp-local-pair 'org-mode "_" "_"))

  (use-package highlight-parentheses
    :straight t
    :defer 5.3
    :diminish highlight-parentheses-mode
    :config (global-highlight-parentheses-mode))

  (defvar show-paren-delay 0)
  (show-paren-mode t)
#+END_SRC
* Interface
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t)

  (load-theme 'doom-acario-light t)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode t)

(use-package spaceline
  :straight t
  :defer 2.2
  :config
  (require 'spaceline-config)
  (setq powerline-default-separator (quote arrow))
  (setq spaceline-line-column-p nil)
  (setq spaceline-buffer-size nil)
  (setq spaceline-workspace-numbers-unicode t)
  (setq spaceline-buffer-encoding-abbrev-p nil)
  (spaceline-spacemacs-theme))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :commands which-key-mode)
#+END_SRC
** Kill ring
#+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
  :straight t
  :bind (("M-y" . popup-kill-ring))) 
#+END_SRC
** Regular expressions
#+begin_src emacs-lisp
(use-package visual-regexp-steroids
  :straight t
  :commands vr/replace)
#+end_src

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :init
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    ;; Dashboard requirements.
    (use-package page-break-lines
      :straight t)
    (use-package all-the-icons
      :straight t)
    ;; Dashboard configuration.
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome to Emacs")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents   . 5)
                            (agenda    . 5)))
    (setq dashboard-set-init-info t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; adds a clock
    (defun dashboard-insert-custom (list-size)
      (defun string-centralized (str)
        (let* ((indent
                (concat "%"
                        (number-to-string
                         (/ (- (window-body-width) (string-width str)) 2))
                        "s"))
               (str (concat indent str indent)))
          (format str " " " ")))
  
      (insert (propertize (string-centralized (format-time-string "%a %d %b %Y" (current-time))) 'font-lock-face '('bold :foreground "#6c4c7b")))
      (newline)
      (insert (propertize (string-centralized (format-time-string "%H:%M" (current-time))) 'font-lock-face '('bold :foreground "#6c4c7b"))))

    (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
    (add-to-list 'dashboard-items '(custom) t)

    (defun test-dashboard () (setq *my-timer* (run-at-time "20 sec" nil #'(lambda ()
                                                                            (when *my-timer*
                                                                             (cancel-timer *my-timer*)
                                                                             (setq *my-timer* nil))
                                                                            (when (string=
                                                                                   (buffer-name (window-buffer))
                                                                                   "*dashboard*")
                                                                             (dashboard-refresh-buffer))))))
    (add-hook 'dashboard-mode-hook #'test-dashboard))
#+END_SRC

* Features

** Ivy
#+BEGIN_SRC emacs-lisp
  ;;; Global
  ;; Ivy is a generic completion tool
  (use-package ivy
    :straight t
    :diminish ivy-mode
    :defer 0.9
    :config
    (use-package swiper
      :straight t
      :bind (("C-s" . swiper)
             :map swiper-map
             ("M-%" . swiper-query-replace)))
    (use-package counsel
      :straight t
      :diminish counsel-mode
      :config (counsel-mode))
    (use-package ivy-rich
      :defer 0.1
      :straight t
      :config
      (ivy-rich-mode 1))
  )
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :hook (dired-mode . (lambda () (dired-omit-mode)))
    :bind (:map dired-mode-map
           ("<return>" . dired-find-alternate-file)
           ("<dead-circumflex>" . dired-up-directory)
           ("E" . image-dired)
           ("J" . dired-omit-mode)))

  (use-package dired-x
    :config
    (setq dired-omit-verbose nil)
    (setq dired-omit-files
          "^\\..+$"))

  (use-package peep-dired
    :straight t
    :bind (:map dired-mode-map
           ("P" . 'peep-dired)))

  (use-package dired-rainbow
    :straight t
    :defer 3.2
    :config
    (progn
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")))

#+END_SRC
